# Finds the default branch of the current repository
function default_branch() {
    git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

# Git Commit Message, Unrelated Improvement version
# Commits with the specified identifier
function gcmui() {
    git commit -m "[UNRELATED-IMPROVEMENT] $1"
}

# Git Checkout Branch, Unrelated Improvement version
# Creates a new branch for unrelated improvements, based off the default branch
# Cherry-picks commits with the specified identifier and commits in the new branch without the identifier
# Makes the original branch keep only commits that don't have the specified identifier
function gcbui() {
    DEFAULT_BRANCH=$(default_branch)
    ORIGINAL_BRANCH=$(gb --show-current)

    # Set default branch name if no parameter is provided
    IMPROVEMENTS_BRANCH_NAME=${1:-unrelated-improvements}

    # All commits from the original branch that aren't on the default branch
    COMMIT_HASHES=$(git log $DEFAULT_BRANCH..$ORIGINAL_BRANCH --reverse --format=%H)

    # Find all commits with the specified identifier
    UNRELATED_IMPROVEMENTS_COMMIT_HASHES=$(git log $DEFAULT_BRANCH..$ORIGINAL_BRANCH --grep="\[UNRELATED-IMPROVEMENT\]" --reverse --format=%H)

    # Create a new branch for unrelated improvements, based off the default branch
    git checkout -b $IMPROVEMENTS_BRANCH_NAME $DEFAULT_BRANCH

    # Cherry-pick commits with the specified identifier and commit in the new branch without the identifier
    echo "$UNRELATED_IMPROVEMENTS_COMMIT_HASHES" | while read commit; do
        git cherry-pick --no-commit $commit && \
        git commit -m "$(git log --format=%B -n 1 $commit | sed 's/\[UNRELATED-IMPROVEMENT\] //')"
    done

    # Push the new branch to the remote repository if --local-only is not provided
    if [[ "$@" != *"--local-only"* ]]; then
        git push origin $IMPROVEMENTS_BRANCH_NAME
    fi

    # Create a temporary branch to cherry the relevant commits from the original branch
    git checkout -b unrelated-improvements-temp-branch $DEFAULT_BRANCH

    # Cherry pick commits from the ORIGINAL_BRANCH that aren't in the $UNRELATED_IMPROVEMENTS_COMMIT_HASHES list
    echo "$COMMIT_HASHES" | while read commit; do
        if [[ ! " ${UNRELATED_IMPROVEMENTS_COMMIT_HASHES} " =~ " ${commit} " ]]; then
            git cherry-pick --quiet $commit
        fi
    done

    # Make the ORIGINAL_BRANCH have the same commits as the temporary branch
    git branch -f $ORIGINAL_BRANCH

    # Switch back to the original branch
    git checkout $ORIGINAL_BRANCH

    # Remove the temporary branch
    git branch -D unrelated-improvements-temp-branch

    # Push the updated branch if --local-only is not provided
    if [[ "$@" != *"--local-only"* ]]; then
        git push -f origin $ORIGINAL_BRANCH
    fi
}
